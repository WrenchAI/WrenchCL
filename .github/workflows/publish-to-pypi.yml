name: Publish Python 🐍 distributions 📦 to PyPI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-n-publish:
    runs-on: ubuntu-latest
    environment: pypi-deployment
    steps:
    - uses: actions/checkout@v2
    - name: Fetch all tags
      run: git fetch --tags
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # Clear the dist directory to avoid conflicts
    - name: Clear dist directory
      run: rm -rf dist/*

    # Auto bump version, push tag, and create a release
    - name: Auto bump version, push tag, and create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
        if [[ -z "$LATEST_TAG" ]]; then
          LATEST_TAG="0.0.0"
        fi
        NEW_VERSION=$(echo "$LATEST_TAG" | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        sed -i "s/version='.*'/version='$NEW_VERSION'/" setup.py

        # Configure Git, push new tag
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION

        # Create a GitHub release
        curl -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
          -d '{
            "tag_name": "'"$NEW_VERSION"'",
            "name": "Release '"$NEW_VERSION"'",
            "body": "Auto-generated release for version '"$NEW_VERSION"'"
          }'

        # Removing older tags/releases beyond the two most recent
        OLDEST_TAGS=$(git tag -l | sort -V | head -n -3)
        for TAG in $OLDEST_TAGS; do
          # Delete tag from git
          git tag -d $TAG
          git push --delete origin $TAG
          
          # Delete release from GitHub
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                           -H "Accept: application/vnd.github.v3+json" \
                           https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG \
                           | jq '.id')
          curl -s -X DELETE \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID
        done

    # Echo NEW_VERSION for debugging or later use
    - name: Echo NEW_VERSION
      run: echo "New Version is $NEW_VERSION"

    # Build the package
    - run: pip install setuptools wheel
    - run: python setup.py sdist bdist_wheel

    # Publish to PyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
