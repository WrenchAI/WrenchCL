name: Test & Publish 🐍 to PyPI 📦

on:
  push:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      versionIncrement:
        description: 'Type of version increment: major, minor, patch'
        required: true
        default: 'patch'

jobs:
  run-pytest-tests:
    runs-on: ubuntu-latest
    environment: pypi-deployment
    env:
      DD_CIVISIBILITY_AGENTLESS_ENABLED: true
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      DD_SITE: 'us5.datadoghq.com'
      DD_SERVICE: 'wrenchcl'
      DD_ENV: 'ci'
    steps:
    - uses: actions/checkout@v4

    # Setup Python
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9' # or any specific version

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U ddtrace
        pip install -r requirements.txt
        pip install pytest pytest-mock

    # Install the package in editable mode
    - name: Install the package in editable mode
      run: pip install -e .

    # Annotate Pytest Failures
    - name: Install plugin
      run: pip install pytest-github-actions-annotate-failures

    # Run pytest across all tests
    - name: Run pytest
      run: pytest --ddtrace

    # Annotate if all tests pass
    - name: Annotate successful test completion
      if: success()
      run: echo "::notice ::All tests passed! ✔️"

    # Inform about manual workflow dispatch
    - name: Manual workflow dispatch instruction
      if: success()
      run: echo "To publish your package, please invoke the 'build-n-publish' workflow manually."

  build-n-publish:
    runs-on: ubuntu-latest
    needs: run-pytest-tests # This ensures build-n-publish only runs if the run-pytest-tests job passes
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/release' }}
    environment: pypi-deployment
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Fetch all tags
      run: git fetch --tags

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install setuptools wheel
        pip install -e .

    # Auto bump version, push tag, and create release
    - name: Auto bump version, push tag, and create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
        if [[ -z "$LATEST_TAG" ]]; then
          LATEST_TAG="0.0.0"
        fi
        # Extract and increment version based on input
        BASE_VERSION=$(echo "$LATEST_TAG" | cut -d 'v' -f 2)
        MAJOR=$(echo "$BASE_VERSION" | cut -d '.' -f 1)
        MINOR=$(echo "$BASE_VERSION" | cut -d '.' -f 2)
        PATCH=$(echo "$BASE_VERSION" | cut -d '.' -f 3)
        
        case ${{ github.event.inputs.versionIncrement }} in
          major)
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR+1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH+1))
            ;;
        esac
        
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        sed -i "s/version='.*'/version='$NEW_VERSION'/" setup.py

        # Configure Git, push new tag
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag $NEW_VERSION
        git push origin $NEW_VERSION

        # Create a GitHub release
        curl -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
          -d '{
            "tag_name": "'"$NEW_VERSION"'",
            "name": "Release '"$NEW_VERSION"'",
            "body": "Auto-generated release for version '"$NEW_VERSION"'"
          }'

        # Cleanup older tags and releases
    - name: Cleanup older tags and releases
      run: |
        get_recent_tags() {
          echo "$(git tag -l | sort -V | tail -n 50)"
        }
    
        RECENT_TAGS=$(get_recent_tags)
    
        if [ $(echo "$RECENT_TAGS" | wc -l) -gt 50 ]; then  # Check if there are more than 50 tags
          OLDEST_TAGS=$(comm -23 <(git tag -l | sort -V) <(echo "$RECENT_TAGS"))
    
          for TAG in $OLDEST_TAGS; do
            git tag -d $TAG
            git push --delete origin $TAG
            
            RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                             -H "Accept: application/vnd.github.v3+json" \
                             https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG \
                             | jq '.id')
            if [[ "$RELEASE_ID" != "null" ]]; then
              curl -s -X DELETE \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID
            fi
          done
        fi

    # Echo NEW_VERSION for debugging or later use
    - name: Echo NEW_VERSION
      run: echo "New version is ${{ env.NEW_VERSION }}"

    # Build the package
    - name: Build the package
      run: python setup.py sdist bdist_wheel

    # Publish to PyPI
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
